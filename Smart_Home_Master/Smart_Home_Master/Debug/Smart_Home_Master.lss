
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00800060  00000662  000006f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ba  008000ba  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b7b  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  0000248f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bcf  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003b74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000080a  00000000  00000000  00003e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001078  00000000  00000000  00004636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000056ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
  8a:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_Write>:
#include "DIO.h"

void DIO_Write(DIO_ChannelTypes ChannelId, STD_LevelTypes Level)
{
	DIO_PortTypes Portx = ChannelId/8;
	DIO_ChannelTypes ChannelPos = ChannelId%8;
  92:	98 2f       	mov	r25, r24
  94:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f1       	breq	.+72     	; 0xe8 <DIO_Write+0x56>
  a0:	30 f0       	brcs	.+12     	; 0xae <DIO_Write+0x1c>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	f1 f1       	breq	.+124    	; 0x122 <DIO_Write+0x90>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_Write+0x1a>
  aa:	58 c0       	rjmp	.+176    	; 0x15c <DIO_Write+0xca>
  ac:	08 95       	ret
		case DIO_PortA:
		if (Level == STD_High)
  ae:	61 30       	cpi	r22, 0x01	; 1
  b0:	69 f4       	brne	.+26     	; 0xcc <DIO_Write+0x3a>
		{
			SetBit(PORTA_Reg, ChannelPos);
  b2:	4b b3       	in	r20, 0x1b	; 27
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_Write+0x2e>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	9a 95       	dec	r25
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_Write+0x2a>
  c4:	cb 01       	movw	r24, r22
  c6:	84 2b       	or	r24, r20
  c8:	8b bb       	out	0x1b, r24	; 27
  ca:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA_Reg, ChannelPos);
  cc:	4b b3       	in	r20, 0x1b	; 27
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_Write+0x48>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	9a 95       	dec	r25
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_Write+0x44>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (Level == STD_High)
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_Write+0x74>
		{
			SetBit(PORTB_Reg, ChannelPos);
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_Write+0x68>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_Write+0x64>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	88 bb       	out	0x18, r24	; 24
 104:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB_Reg, ChannelPos);
 106:	48 b3       	in	r20, 0x18	; 24
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_Write+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	9a 95       	dec	r25
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_Write+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (Level == STD_High)
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <DIO_Write+0xae>
		{
			SetBit(PORTC_Reg, ChannelPos);
 126:	45 b3       	in	r20, 0x15	; 21
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_Write+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	9a 95       	dec	r25
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_Write+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC_Reg, ChannelPos);
 140:	45 b3       	in	r20, 0x15	; 21
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_Write+0xbc>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	9a 95       	dec	r25
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_Write+0xb8>
 152:	cb 01       	movw	r24, r22
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	85 bb       	out	0x15, r24	; 21
 15a:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (Level == STD_High)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	69 f4       	brne	.+26     	; 0x17a <DIO_Write+0xe8>
		{
			SetBit(PORTD_Reg, ChannelPos);
 160:	42 b3       	in	r20, 0x12	; 18
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_Write+0xdc>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	9a 95       	dec	r25
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_Write+0xd8>
 172:	cb 01       	movw	r24, r22
 174:	84 2b       	or	r24, r20
 176:	82 bb       	out	0x12, r24	; 18
 178:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD_Reg, ChannelPos);
 17a:	42 b3       	in	r20, 0x12	; 18
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_Write+0xf6>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	9a 95       	dec	r25
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_Write+0xf2>
 18c:	cb 01       	movw	r24, r22
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	82 bb       	out	0x12, r24	; 18
 194:	08 95       	ret

00000196 <DIO_Init>:
	{Input, STD_Low},
	{Input, STD_Low}
};

void DIO_Init()
{
 196:	e0 e6       	ldi	r30, 0x60	; 96
 198:	f0 e0       	ldi	r31, 0x00	; 0
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 19a:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg, ChannelPos);
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
	{
		Portx = count/8;
		ChannelPos = count%8;
 1a0:	28 2f       	mov	r18, r24
 1a2:	27 70       	andi	r18, 0x07	; 7
		switch(Portx)
 1a4:	98 2f       	mov	r25, r24
 1a6:	96 95       	lsr	r25
 1a8:	96 95       	lsr	r25
 1aa:	96 95       	lsr	r25
 1ac:	91 30       	cpi	r25, 0x01	; 1
 1ae:	09 f1       	breq	.+66     	; 0x1f2 <DIO_Init+0x5c>
 1b0:	30 f0       	brcs	.+12     	; 0x1be <DIO_Init+0x28>
 1b2:	92 30       	cpi	r25, 0x02	; 2
 1b4:	c1 f1       	breq	.+112    	; 0x226 <DIO_Init+0x90>
 1b6:	93 30       	cpi	r25, 0x03	; 3
 1b8:	09 f4       	brne	.+2      	; 0x1bc <DIO_Init+0x26>
 1ba:	4f c0       	rjmp	.+158    	; 0x25a <DIO_Init+0xc4>
 1bc:	67 c0       	rjmp	.+206    	; 0x28c <DIO_Init+0xf6>
		{
			case  DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 1be:	90 81       	ld	r25, Z
 1c0:	91 30       	cpi	r25, 0x01	; 1
 1c2:	59 f4       	brne	.+22     	; 0x1da <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg, ChannelPos);
 1c4:	9a b3       	in	r25, 0x1a	; 26
 1c6:	ba 01       	movw	r22, r20
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_Init+0x38>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	2a 95       	dec	r18
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_Init+0x34>
 1d2:	9b 01       	movw	r18, r22
 1d4:	29 2b       	or	r18, r25
 1d6:	2a bb       	out	0x1a, r18	; 26
 1d8:	59 c0       	rjmp	.+178    	; 0x28c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg, ChannelPos);
 1da:	3a b3       	in	r19, 0x1a	; 26
 1dc:	ba 01       	movw	r22, r20
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_Init+0x4e>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	2a 95       	dec	r18
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_Init+0x4a>
 1e8:	96 2f       	mov	r25, r22
 1ea:	90 95       	com	r25
 1ec:	93 23       	and	r25, r19
 1ee:	9a bb       	out	0x1a, r25	; 26
 1f0:	4d c0       	rjmp	.+154    	; 0x28c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 1f2:	90 81       	ld	r25, Z
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg, ChannelPos);
 1f8:	97 b3       	in	r25, 0x17	; 23
 1fa:	ba 01       	movw	r22, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Init+0x6c>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Init+0x68>
 206:	9b 01       	movw	r18, r22
 208:	29 2b       	or	r18, r25
 20a:	27 bb       	out	0x17, r18	; 23
 20c:	3f c0       	rjmp	.+126    	; 0x28c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 20e:	37 b3       	in	r19, 0x17	; 23
 210:	ba 01       	movw	r22, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_Init+0x82>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_Init+0x7e>
 21c:	96 2f       	mov	r25, r22
 21e:	90 95       	com	r25
 220:	93 23       	and	r25, r19
 222:	97 bb       	out	0x17, r25	; 23
 224:	33 c0       	rjmp	.+102    	; 0x28c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 226:	90 81       	ld	r25, Z
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg, ChannelPos);
 22c:	94 b3       	in	r25, 0x14	; 20
 22e:	ba 01       	movw	r22, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Init+0xa0>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Init+0x9c>
 23a:	9b 01       	movw	r18, r22
 23c:	29 2b       	or	r18, r25
 23e:	24 bb       	out	0x14, r18	; 20
 240:	25 c0       	rjmp	.+74     	; 0x28c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg, ChannelPos);
 242:	34 b3       	in	r19, 0x14	; 20
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Init+0xb6>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Init+0xb2>
 250:	96 2f       	mov	r25, r22
 252:	90 95       	com	r25
 254:	93 23       	and	r25, r19
 256:	94 bb       	out	0x14, r25	; 20
 258:	19 c0       	rjmp	.+50     	; 0x28c <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 25a:	90 81       	ld	r25, Z
 25c:	91 30       	cpi	r25, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg, ChannelPos);
 260:	91 b3       	in	r25, 0x11	; 17
 262:	ba 01       	movw	r22, r20
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Init+0xd4>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	2a 95       	dec	r18
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Init+0xd0>
 26e:	9b 01       	movw	r18, r22
 270:	29 2b       	or	r18, r25
 272:	21 bb       	out	0x11, r18	; 17
 274:	0b c0       	rjmp	.+22     	; 0x28c <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg, ChannelPos);
 276:	31 b3       	in	r19, 0x11	; 17
 278:	ba 01       	movw	r22, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_Init+0xea>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_Init+0xe6>
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	93 23       	and	r25, r19
 28a:	91 bb       	out	0x11, r25	; 17
void DIO_Init()
{
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	32 96       	adiw	r30, 0x02	; 2
 290:	80 32       	cpi	r24, 0x20	; 32
 292:	09 f0       	breq	.+2      	; 0x296 <DIO_Init+0x100>
 294:	85 cf       	rjmp	.-246    	; 0x1a0 <DIO_Init+0xa>
				ClearBit(DDRD_Reg, ChannelPos);
			}
			break;
		}
	}
 296:	08 95       	ret

00000298 <LCD_Cmd>:
	if(loc<8) LCD_Cmd(0x40 + (loc * 8));
	for (i = 0; i< 8; i++)
	{
		LCD_Char(data[i]);
	}
}
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	9c 2f       	mov	r25, r28
 2a2:	90 7f       	andi	r25, 0xF0	; 240
 2a4:	89 2b       	or	r24, r25
 2a6:	8b bb       	out	0x1b, r24	; 27
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 2b8:	8f e8       	ldi	r24, 0x8F	; 143
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_Cmd+0x24>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_Cmd+0x2a>
 2c2:	00 00       	nop
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	83 e0       	ldi	r24, 0x03	; 3
 2c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 2cc:	8f e1       	ldi	r24, 0x1F	; 31
 2ce:	9e e4       	ldi	r25, 0x4E	; 78
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_Cmd+0x38>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_Cmd+0x3e>
 2d6:	00 00       	nop
 2d8:	8b b3       	in	r24, 0x1b	; 27
 2da:	28 2f       	mov	r18, r24
 2dc:	2f 70       	andi	r18, 0x0F	; 15
 2de:	30 e1       	ldi	r19, 0x10	; 16
 2e0:	c3 9f       	mul	r28, r19
 2e2:	c0 01       	movw	r24, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	82 2b       	or	r24, r18
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	83 e0       	ldi	r24, 0x03	; 3
 2f6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 2fa:	8f e8       	ldi	r24, 0x8F	; 143
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <LCD_Cmd+0x66>
 302:	00 c0       	rjmp	.+0      	; 0x304 <LCD_Cmd+0x6c>
 304:	00 00       	nop
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9f e1       	ldi	r25, 0x1F	; 31
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_Cmd+0x7a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_Cmd+0x80>
 318:	00 00       	nop
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <LCD_Init>:
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	82 e0       	ldi	r24, 0x02	; 2
 322:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	89 ef       	ldi	r24, 0xF9	; 249
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <LCD_Init+0xe>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_Init+0x18>
 336:	00 00       	nop
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	93 e0       	ldi	r25, 0x03	; 3
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	f1 f7       	brne	.-4      	; 0x342 <LCD_Init+0x24>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_Init+0x2a>
 348:	00 00       	nop
 34a:	82 e3       	ldi	r24, 0x32	; 50
 34c:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 350:	88 e2       	ldi	r24, 0x28	; 40
 352:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 356:	86 e0       	ldi	r24, 0x06	; 6
 358:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 35c:	8c e0       	ldi	r24, 0x0C	; 12
 35e:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 368:	8f e3       	ldi	r24, 0x3F	; 63
 36a:	9f e1       	ldi	r25, 0x1F	; 31
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_Init+0x4e>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_Init+0x54>
 372:	00 00       	nop
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 37a:	08 95       	ret

0000037c <LCD_Char>:
 37c:	cf 93       	push	r28
 37e:	c8 2f       	mov	r28, r24
 380:	8b b3       	in	r24, 0x1b	; 27
 382:	8f 70       	andi	r24, 0x0F	; 15
 384:	9c 2f       	mov	r25, r28
 386:	90 7f       	andi	r25, 0xF0	; 240
 388:	89 2b       	or	r24, r25
 38a:	8b bb       	out	0x1b, r24	; 27
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 39c:	8f e8       	ldi	r24, 0x8F	; 143
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_Char+0x24>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_Char+0x2a>
 3a6:	00 00       	nop
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 3b0:	8f e1       	ldi	r24, 0x1F	; 31
 3b2:	9e e4       	ldi	r25, 0x4E	; 78
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <LCD_Char+0x38>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <LCD_Char+0x3e>
 3ba:	00 00       	nop
 3bc:	8b b3       	in	r24, 0x1b	; 27
 3be:	28 2f       	mov	r18, r24
 3c0:	2f 70       	andi	r18, 0x0F	; 15
 3c2:	30 e1       	ldi	r19, 0x10	; 16
 3c4:	c3 9f       	mul	r28, r19
 3c6:	c0 01       	movw	r24, r0
 3c8:	11 24       	eor	r1, r1
 3ca:	82 2b       	or	r24, r18
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 3de:	8f e8       	ldi	r24, 0x8F	; 143
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_Char+0x66>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_Char+0x6c>
 3e8:	00 00       	nop
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_Write>
 3f2:	8f e3       	ldi	r24, 0x3F	; 63
 3f4:	9f e1       	ldi	r25, 0x1F	; 31
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_Char+0x7a>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_Char+0x80>
 3fc:	00 00       	nop
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <LCD_String>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	59 f0       	breq	.+22     	; 0x426 <LCD_String+0x24>
 410:	8f 01       	movw	r16, r30
 412:	c0 e0       	ldi	r28, 0x00	; 0
 414:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Char>
 418:	cf 5f       	subi	r28, 0xFF	; 255
 41a:	f8 01       	movw	r30, r16
 41c:	ec 0f       	add	r30, r28
 41e:	f1 1d       	adc	r31, r1
 420:	80 81       	ld	r24, Z
 422:	81 11       	cpse	r24, r1
 424:	f7 cf       	rjmp	.-18     	; 0x414 <LCD_String+0x12>
 426:	cf 91       	pop	r28
 428:	1f 91       	pop	r17
 42a:	0f 91       	pop	r16
 42c:	08 95       	ret

0000042e <LCD_StringPos>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	61 30       	cpi	r22, 0x01	; 1
 436:	19 f0       	breq	.+6      	; 0x43e <LCD_StringPos+0x10>
 438:	62 30       	cpi	r22, 0x02	; 2
 43a:	51 f0       	breq	.+20     	; 0x450 <LCD_StringPos+0x22>
 43c:	11 c0       	rjmp	.+34     	; 0x460 <LCD_StringPos+0x32>
 43e:	84 2f       	mov	r24, r20
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	80 68       	ori	r24, 0x80	; 128
 444:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 448:	ce 01       	movw	r24, r28
 44a:	0e 94 01 02 	call	0x402	; 0x402 <LCD_String>
 44e:	08 c0       	rjmp	.+16     	; 0x460 <LCD_StringPos+0x32>
 450:	84 2f       	mov	r24, r20
 452:	8f 70       	andi	r24, 0x0F	; 15
 454:	80 6c       	ori	r24, 0xC0	; 192
 456:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
 45a:	ce 01       	movw	r24, r28
 45c:	0e 94 01 02 	call	0x402	; 0x402 <LCD_String>
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <LCD_CharPos>:

void LCD_CharPos(Sint8 data, Uint8 line, Uint8 pos)
{
 466:	cf 93       	push	r28
 468:	c8 2f       	mov	r28, r24
	switch (line)
 46a:	61 30       	cpi	r22, 0x01	; 1
 46c:	19 f0       	breq	.+6      	; 0x474 <LCD_CharPos+0xe>
 46e:	62 30       	cpi	r22, 0x02	; 2
 470:	51 f0       	breq	.+20     	; 0x486 <LCD_CharPos+0x20>
 472:	11 c0       	rjmp	.+34     	; 0x496 <LCD_CharPos+0x30>
	{
		case 1:
		LCD_Cmd((0x80) | (pos & 0x0F));
 474:	84 2f       	mov	r24, r20
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
		LCD_Char(data);
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Char>
		break;
 484:	08 c0       	rjmp	.+16     	; 0x496 <LCD_CharPos+0x30>
		case 2:
		LCD_Cmd((0xC0) | (pos & 0x0F));
 486:	84 2f       	mov	r24, r20
 488:	8f 70       	andi	r24, 0x0F	; 15
 48a:	80 6c       	ori	r24, 0xC0	; 192
 48c:	0e 94 4c 01 	call	0x298	; 0x298 <LCD_Cmd>
		LCD_Char(data);
 490:	8c 2f       	mov	r24, r28
 492:	0e 94 be 01 	call	0x37c	; 0x37c <LCD_Char>
		break;
	}
}
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <main>:
volatile unsigned short sec = 0;
volatile unsigned char i = 0, y = 0;

int main(void)
{
	DIO_Init();
 49a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_Init>
	LCD_Init();
 49e:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_Init>
	UART_Init();
 4a2:	0e 94 23 03 	call	0x646	; 0x646 <UART_Init>
	
	SPI_InitType InitData = {Master,MSB};
	SPI_Init(InitData);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 06 03 	call	0x60c	; 0x60c <SPI_Init>
	SlaveEN();
 4ae:	c4 98       	cbi	0x18, 4	; 24
	
	LCD_String("Welcome :)");
 4b0:	80 ea       	ldi	r24, 0xA0	; 160
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	0e 94 01 02 	call	0x402	; 0x402 <LCD_String>
	LCD_StringPos("Temperature: ",2,0);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	62 e0       	ldi	r22, 0x02	; 2
 4bc:	8b ea       	ldi	r24, 0xAB	; 171
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_StringPos>
	
	
	
	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12); //Prescalar 1024
 4c4:	8d e0       	ldi	r24, 0x0D	; 13
 4c6:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<OCIE1A);
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	89 bf       	out	0x39, r24	; 57
	TCCR1A = (1<<COM1A0);
 4cc:	80 e4       	ldi	r24, 0x40	; 64
 4ce:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 15625;//1 sec
 4d0:	89 e0       	ldi	r24, 0x09	; 9
 4d2:	9d e3       	ldi	r25, 0x3D	; 61
 4d4:	9b bd       	out	0x2b, r25	; 43
 4d6:	8a bd       	out	0x2a, r24	; 42
	
	sei();
 4d8:	78 94       	sei
	
	//First Temperature Read
	SPI_TransmitChar(0x44);
 4da:	84 e4       	ldi	r24, 0x44	; 68
 4dc:	0e 94 1f 03 	call	0x63e	; 0x63e <SPI_TransmitChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	83 ec       	ldi	r24, 0xC3	; 195
 4e4:	99 e0       	ldi	r25, 0x09	; 9
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0x4c>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0x56>
 4f0:	00 00       	nop
	_delay_ms(200);
	i = SPI_Receive_Transmit(0x21);
 4f2:	81 e2       	ldi	r24, 0x21	; 33
 4f4:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Receive_Transmit>
 4f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <i>
 4fc:	2f ef       	ldi	r18, 0xFF	; 255
 4fe:	83 ec       	ldi	r24, 0xC3	; 195
 500:	99 e0       	ldi	r25, 0x09	; 9
 502:	21 50       	subi	r18, 0x01	; 1
 504:	80 40       	sbci	r24, 0x00	; 0
 506:	90 40       	sbci	r25, 0x00	; 0
 508:	e1 f7       	brne	.-8      	; 0x502 <main+0x68>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x72>
 50c:	00 00       	nop
	_delay_ms(200);
	y = SPI_Receive_Transmit(0x22);
 50e:	82 e2       	ldi	r24, 0x22	; 34
 510:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Receive_Transmit>
 514:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
	LCD_CharPos(i,2,13);
 518:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <i>
 51c:	4d e0       	ldi	r20, 0x0D	; 13
 51e:	62 e0       	ldi	r22, 0x02	; 2
 520:	0e 94 33 02 	call	0x466	; 0x466 <LCD_CharPos>
	LCD_CharPos(y,2,14);
 524:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 528:	4e e0       	ldi	r20, 0x0E	; 14
 52a:	62 e0       	ldi	r22, 0x02	; 2
 52c:	0e 94 33 02 	call	0x466	; 0x466 <LCD_CharPos>
	
	
	while (1)
	{
		SPI_TransmitChar(UART_ReceiveChar());
 530:	0e 94 2b 03 	call	0x656	; 0x656 <UART_ReceiveChar>
 534:	0e 94 1f 03 	call	0x63e	; 0x63e <SPI_TransmitChar>
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	89 e6       	ldi	r24, 0x69	; 105
 53c:	98 e1       	ldi	r25, 0x18	; 24
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0xa4>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0xae>
 548:	00 00       	nop
 54a:	f2 cf       	rjmp	.-28     	; 0x530 <main+0x96>

0000054c <__vector_7>:
		_delay_ms(500);
	}
}

ISR(TIMER1_COMPA_vect)
{
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	2f 93       	push	r18
 558:	3f 93       	push	r19
 55a:	4f 93       	push	r20
 55c:	5f 93       	push	r21
 55e:	6f 93       	push	r22
 560:	7f 93       	push	r23
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	af 93       	push	r26
 568:	bf 93       	push	r27
 56a:	ef 93       	push	r30
 56c:	ff 93       	push	r31
	sec++;
 56e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <sec>
 572:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <sec+0x1>
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <sec+0x1>
 57c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <sec>
	if (sec > 9)//Check on room's temperature every 10 seconds
 580:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <sec>
 584:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <sec+0x1>
 588:	0a 97       	sbiw	r24, 0x0a	; 10
 58a:	78 f1       	brcs	.+94     	; 0x5ea <__vector_7+0x9e>
	{
		SPI_TransmitChar(0x44);
 58c:	84 e4       	ldi	r24, 0x44	; 68
 58e:	0e 94 1f 03 	call	0x63e	; 0x63e <SPI_TransmitChar>
 592:	2f ef       	ldi	r18, 0xFF	; 255
 594:	83 ec       	ldi	r24, 0xC3	; 195
 596:	99 e0       	ldi	r25, 0x09	; 9
 598:	21 50       	subi	r18, 0x01	; 1
 59a:	80 40       	sbci	r24, 0x00	; 0
 59c:	90 40       	sbci	r25, 0x00	; 0
 59e:	e1 f7       	brne	.-8      	; 0x598 <__vector_7+0x4c>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <__vector_7+0x56>
 5a2:	00 00       	nop
		_delay_ms(200);
		i = SPI_Receive_Transmit(0x21);
 5a4:	81 e2       	ldi	r24, 0x21	; 33
 5a6:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Receive_Transmit>
 5aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <i>
 5ae:	2f ef       	ldi	r18, 0xFF	; 255
 5b0:	83 ec       	ldi	r24, 0xC3	; 195
 5b2:	99 e0       	ldi	r25, 0x09	; 9
 5b4:	21 50       	subi	r18, 0x01	; 1
 5b6:	80 40       	sbci	r24, 0x00	; 0
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__vector_7+0x68>
 5bc:	00 c0       	rjmp	.+0      	; 0x5be <__vector_7+0x72>
 5be:	00 00       	nop
		_delay_ms(200);
		y = SPI_Receive_Transmit(0x22);
 5c0:	82 e2       	ldi	r24, 0x22	; 34
 5c2:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Receive_Transmit>
 5c6:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__data_end>
		sec = 0;
 5ca:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <sec+0x1>
 5ce:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <sec>
		LCD_CharPos(i,2,13);
 5d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <i>
 5d6:	4d e0       	ldi	r20, 0x0D	; 13
 5d8:	62 e0       	ldi	r22, 0x02	; 2
 5da:	0e 94 33 02 	call	0x466	; 0x466 <LCD_CharPos>
		LCD_CharPos(y,2,14);
 5de:	80 91 ba 00 	lds	r24, 0x00BA	; 0x8000ba <__data_end>
 5e2:	4e e0       	ldi	r20, 0x0E	; 14
 5e4:	62 e0       	ldi	r22, 0x02	; 2
 5e6:	0e 94 33 02 	call	0x466	; 0x466 <LCD_CharPos>
	}
}
 5ea:	ff 91       	pop	r31
 5ec:	ef 91       	pop	r30
 5ee:	bf 91       	pop	r27
 5f0:	af 91       	pop	r26
 5f2:	9f 91       	pop	r25
 5f4:	8f 91       	pop	r24
 5f6:	7f 91       	pop	r23
 5f8:	6f 91       	pop	r22
 5fa:	5f 91       	pop	r21
 5fc:	4f 91       	pop	r20
 5fe:	3f 91       	pop	r19
 600:	2f 91       	pop	r18
 602:	0f 90       	pop	r0
 604:	0f be       	out	0x3f, r0	; 63
 606:	0f 90       	pop	r0
 608:	1f 90       	pop	r1
 60a:	18 95       	reti

0000060c <SPI_Init>:

#include "SPI.h"

void SPI_Init(SPI_InitType status)
{
	switch (status.state)
 60c:	88 23       	and	r24, r24
 60e:	19 f0       	breq	.+6      	; 0x616 <SPI_Init+0xa>
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	51 f0       	breq	.+20     	; 0x628 <SPI_Init+0x1c>
 614:	08 95       	ret
	{
		case Master:
		SPIDr |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 616:	87 b3       	in	r24, 0x17	; 23
 618:	80 6b       	ori	r24, 0xB0	; 176
 61a:	87 bb       	out	0x17, r24	; 23
		SPIDr &=~ (1<<MISO);
 61c:	be 98       	cbi	0x17, 6	; 23
		SlaveDIS();
 61e:	c4 9a       	sbi	0x18, 4	; 24
		SPCR |= (1<<MSTR)|(1<<SPE)|(1<<SPR1);
 620:	8d b1       	in	r24, 0x0d	; 13
 622:	82 65       	ori	r24, 0x52	; 82
 624:	8d b9       	out	0x0d, r24	; 13
		//SPI->MySPCR._MSTR = 1;
		//SPI->MySPCR._SPE = 1;
		//SPI->MySPCR.SPCRBits._SPE = 1;
		//SPI->MySPCR.SPCRBits._MSTR = 1;
		//SPI->MySPCR.SPCRALL = 0x50;
		break;
 626:	08 95       	ret
		
		case Slave:
		SPIDr &=~ ((1<<SS)|(1<<MOSI)|(1<<SCK));
 628:	87 b3       	in	r24, 0x17	; 23
 62a:	8f 74       	andi	r24, 0x4F	; 79
 62c:	87 bb       	out	0x17, r24	; 23
		SPIDr |= (1<<MISO);
 62e:	be 9a       	sbi	0x17, 6	; 23
		SPCR |= (1<<SPE);
 630:	6e 9a       	sbi	0x0d, 6	; 13
 632:	08 95       	ret

00000634 <SPI_Receive_Transmit>:
	}
}

unsigned char SPI_Receive_Transmit(unsigned char data)
{
	SPDR = data;
 634:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 636:	77 9b       	sbis	0x0e, 7	; 14
 638:	fe cf       	rjmp	.-4      	; 0x636 <SPI_Receive_Transmit+0x2>
	//while (SPI->MySPSR._SPIF == 0);
	return SPDR;
 63a:	8f b1       	in	r24, 0x0f	; 15
}
 63c:	08 95       	ret

0000063e <SPI_TransmitChar>:

void SPI_TransmitChar(unsigned char Data)
{
	SPDR = Data;
 63e:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1<<SPIF)));
 640:	77 9b       	sbis	0x0e, 7	; 14
 642:	fe cf       	rjmp	.-4      	; 0x640 <SPI_TransmitChar+0x2>
	//while (SPI->MySPSR._SPIF == 0);
}
 644:	08 95       	ret

00000646 <UART_Init>:
}

void UART_SendChar(char data)
{
	while(!(UCSRA & (1<<UDRE)));
	UDR = data;
 646:	88 e1       	ldi	r24, 0x18	; 24
 648:	8a b9       	out	0x0a, r24	; 10
 64a:	86 e8       	ldi	r24, 0x86	; 134
 64c:	80 bd       	out	0x20, r24	; 32
 64e:	87 e6       	ldi	r24, 0x67	; 103
 650:	89 b9       	out	0x09, r24	; 9
 652:	10 bc       	out	0x20, r1	; 32
 654:	08 95       	ret

00000656 <UART_ReceiveChar>:
}

unsigned char UART_ReceiveChar()
{
	while((UCSRA & (1 << RXC)) == 0);
 656:	5f 9b       	sbis	0x0b, 7	; 11
 658:	fe cf       	rjmp	.-4      	; 0x656 <UART_ReceiveChar>
	return UDR;
 65a:	8c b1       	in	r24, 0x0c	; 12
}
 65c:	08 95       	ret

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
