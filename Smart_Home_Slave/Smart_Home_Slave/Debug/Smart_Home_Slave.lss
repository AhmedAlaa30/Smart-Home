
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000670  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00000670  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bf5  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b96  00000000  00000000  00002539  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c8f  00000000  00000000  000030cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00003d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083d  00000000  00000000  00003fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fa4  00000000  00000000  00004815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000057b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  7a:	0c 94 36 03 	jmp	0x66c	; 0x66c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC.h"


void ADC_Init()
{
	ADMUX |= (1<<REFS1) | (1<<REFS0);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)|(1 << ADIE);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	8f 68       	ori	r24, 0x8F	; 143
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	08 95       	ret

00000090 <ADC_Read>:
}

unsigned short ADC_Read(unsigned char channel)
{
	unsigned short data = 0;
	ADMUX = (ADMUX & 0b11100000)|(channel & 0b00011111);
  90:	97 b1       	in	r25, 0x07	; 7
  92:	90 7e       	andi	r25, 0xE0	; 224
  94:	8f 71       	andi	r24, 0x1F	; 31
  96:	89 2b       	or	r24, r25
  98:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1<<ADIF)));
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);	
  a0:	34 9a       	sbi	0x06, 4	; 6
	data = ADCL;
  a2:	84 b1       	in	r24, 0x04	; 4
	data |= (ADCH << 8);
  a4:	25 b1       	in	r18, 0x05	; 5
	return data;
  a6:	90 e0       	ldi	r25, 0x00	; 0
}
  a8:	92 2b       	or	r25, r18
  aa:	08 95       	ret

000000ac <DC_Motor_Init>:

#include "DC_Motor.h"

void DC_Motor_Init()
{
	DDRC |= (1<<5)|(1<<6);
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	80 66       	ori	r24, 0x60	; 96
  b0:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<5);
  b2:	8d 9a       	sbi	0x11, 5	; 17
	OCR1A = 200;
  b4:	88 ec       	ldi	r24, 0xC8	; 200
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
	TCCR1A =  (1<<WGM10) | (1<<COM1A1);
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	8e bd       	out	0x2e, r24	; 46
  c4:	08 95       	ret

000000c6 <DC_Motor_Direction>:
}

void DC_Motor_Direction(unsigned char Dir)
{
	switch(Dir)
  c6:	82 34       	cpi	r24, 0x42	; 66
  c8:	29 f0       	breq	.+10     	; 0xd4 <DC_Motor_Direction+0xe>
  ca:	86 34       	cpi	r24, 0x46	; 70
  cc:	29 f4       	brne	.+10     	; 0xd8 <DC_Motor_Direction+0x12>
	{
		case 'F':
		PORTC |= (1<<5);
  ce:	ad 9a       	sbi	0x15, 5	; 21
		PORTC &=~ (1<<6);
  d0:	ae 98       	cbi	0x15, 6	; 21
		break;
  d2:	08 95       	ret
		case 'B':
		PORTC |= (1<<6);
  d4:	ae 9a       	sbi	0x15, 6	; 21
		PORTC &=~ (1<<5);
  d6:	ad 98       	cbi	0x15, 5	; 21
  d8:	08 95       	ret

000000da <DIO_Write>:
#include "DIO.h"

void DIO_Write(DIO_ChannelTypes ChannelId, STD_LevelTypes Level)
{
	DIO_PortTypes Portx = ChannelId/8;
	DIO_ChannelTypes ChannelPos = ChannelId%8;
  da:	98 2f       	mov	r25, r24
  dc:	97 70       	andi	r25, 0x07	; 7
	switch(Portx){
  de:	86 95       	lsr	r24
  e0:	86 95       	lsr	r24
  e2:	86 95       	lsr	r24
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	21 f1       	breq	.+72     	; 0x130 <DIO_Write+0x56>
  e8:	30 f0       	brcs	.+12     	; 0xf6 <DIO_Write+0x1c>
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	f1 f1       	breq	.+124    	; 0x16a <DIO_Write+0x90>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	09 f4       	brne	.+2      	; 0xf4 <DIO_Write+0x1a>
  f2:	58 c0       	rjmp	.+176    	; 0x1a4 <DIO_Write+0xca>
  f4:	08 95       	ret
		case DIO_PortA:
		if (Level == STD_High)
  f6:	61 30       	cpi	r22, 0x01	; 1
  f8:	69 f4       	brne	.+26     	; 0x114 <DIO_Write+0x3a>
		{
			SetBit(PORTA_Reg, ChannelPos);
  fa:	4b b3       	in	r20, 0x1b	; 27
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	b9 01       	movw	r22, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_Write+0x2e>
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	9a 95       	dec	r25
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_Write+0x2a>
 10c:	cb 01       	movw	r24, r22
 10e:	84 2b       	or	r24, r20
 110:	8b bb       	out	0x1b, r24	; 27
 112:	08 95       	ret
		}
		else
		{
			ClearBit(PORTA_Reg, ChannelPos);
 114:	4b b3       	in	r20, 0x1b	; 27
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	b9 01       	movw	r22, r18
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DIO_Write+0x48>
 11e:	66 0f       	add	r22, r22
 120:	77 1f       	adc	r23, r23
 122:	9a 95       	dec	r25
 124:	e2 f7       	brpl	.-8      	; 0x11e <DIO_Write+0x44>
 126:	cb 01       	movw	r24, r22
 128:	80 95       	com	r24
 12a:	84 23       	and	r24, r20
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (Level == STD_High)
 130:	61 30       	cpi	r22, 0x01	; 1
 132:	69 f4       	brne	.+26     	; 0x14e <DIO_Write+0x74>
		{
			SetBit(PORTB_Reg, ChannelPos);
 134:	48 b3       	in	r20, 0x18	; 24
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_Write+0x68>
 13e:	66 0f       	add	r22, r22
 140:	77 1f       	adc	r23, r23
 142:	9a 95       	dec	r25
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_Write+0x64>
 146:	cb 01       	movw	r24, r22
 148:	84 2b       	or	r24, r20
 14a:	88 bb       	out	0x18, r24	; 24
 14c:	08 95       	ret
		}
		else
		{
			ClearBit(PORTB_Reg, ChannelPos);
 14e:	48 b3       	in	r20, 0x18	; 24
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_Write+0x82>
 158:	66 0f       	add	r22, r22
 15a:	77 1f       	adc	r23, r23
 15c:	9a 95       	dec	r25
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_Write+0x7e>
 160:	cb 01       	movw	r24, r22
 162:	80 95       	com	r24
 164:	84 23       	and	r24, r20
 166:	88 bb       	out	0x18, r24	; 24
 168:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (Level == STD_High)
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	69 f4       	brne	.+26     	; 0x188 <DIO_Write+0xae>
		{
			SetBit(PORTC_Reg, ChannelPos);
 16e:	45 b3       	in	r20, 0x15	; 21
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_Write+0xa2>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_Write+0x9e>
 180:	cb 01       	movw	r24, r22
 182:	84 2b       	or	r24, r20
 184:	85 bb       	out	0x15, r24	; 21
 186:	08 95       	ret
		}
		else
		{
			ClearBit(PORTC_Reg, ChannelPos);
 188:	45 b3       	in	r20, 0x15	; 21
 18a:	21 e0       	ldi	r18, 0x01	; 1
 18c:	30 e0       	ldi	r19, 0x00	; 0
 18e:	b9 01       	movw	r22, r18
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_Write+0xbc>
 192:	66 0f       	add	r22, r22
 194:	77 1f       	adc	r23, r23
 196:	9a 95       	dec	r25
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_Write+0xb8>
 19a:	cb 01       	movw	r24, r22
 19c:	80 95       	com	r24
 19e:	84 23       	and	r24, r20
 1a0:	85 bb       	out	0x15, r24	; 21
 1a2:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (Level == STD_High)
 1a4:	61 30       	cpi	r22, 0x01	; 1
 1a6:	69 f4       	brne	.+26     	; 0x1c2 <DIO_Write+0xe8>
		{
			SetBit(PORTD_Reg, ChannelPos);
 1a8:	42 b3       	in	r20, 0x12	; 18
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	b9 01       	movw	r22, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_Write+0xdc>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	9a 95       	dec	r25
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_Write+0xd8>
 1ba:	cb 01       	movw	r24, r22
 1bc:	84 2b       	or	r24, r20
 1be:	82 bb       	out	0x12, r24	; 18
 1c0:	08 95       	ret
		}
		else
		{
			ClearBit(PORTD_Reg, ChannelPos);
 1c2:	42 b3       	in	r20, 0x12	; 18
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_Write+0xf6>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	9a 95       	dec	r25
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_Write+0xf2>
 1d4:	cb 01       	movw	r24, r22
 1d6:	80 95       	com	r24
 1d8:	84 23       	and	r24, r20
 1da:	82 bb       	out	0x12, r24	; 18
 1dc:	08 95       	ret

000001de <DIO_Init>:
	{Input, STD_Low},
	{Input, STD_Low}
};

void DIO_Init()
{
 1de:	e0 e6       	ldi	r30, 0x60	; 96
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 1e2:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg, ChannelPos);
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
	{
		Portx = count/8;
		ChannelPos = count%8;
 1e8:	28 2f       	mov	r18, r24
 1ea:	27 70       	andi	r18, 0x07	; 7
		switch(Portx)
 1ec:	98 2f       	mov	r25, r24
 1ee:	96 95       	lsr	r25
 1f0:	96 95       	lsr	r25
 1f2:	96 95       	lsr	r25
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	09 f1       	breq	.+66     	; 0x23a <DIO_Init+0x5c>
 1f8:	30 f0       	brcs	.+12     	; 0x206 <DIO_Init+0x28>
 1fa:	92 30       	cpi	r25, 0x02	; 2
 1fc:	c1 f1       	breq	.+112    	; 0x26e <DIO_Init+0x90>
 1fe:	93 30       	cpi	r25, 0x03	; 3
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_Init+0x26>
 202:	4f c0       	rjmp	.+158    	; 0x2a2 <DIO_Init+0xc4>
 204:	67 c0       	rjmp	.+206    	; 0x2d4 <DIO_Init+0xf6>
		{
			case  DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 206:	90 81       	ld	r25, Z
 208:	91 30       	cpi	r25, 0x01	; 1
 20a:	59 f4       	brne	.+22     	; 0x222 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg, ChannelPos);
 20c:	9a b3       	in	r25, 0x1a	; 26
 20e:	ba 01       	movw	r22, r20
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_Init+0x38>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	2a 95       	dec	r18
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_Init+0x34>
 21a:	9b 01       	movw	r18, r22
 21c:	29 2b       	or	r18, r25
 21e:	2a bb       	out	0x1a, r18	; 26
 220:	59 c0       	rjmp	.+178    	; 0x2d4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg, ChannelPos);
 222:	3a b3       	in	r19, 0x1a	; 26
 224:	ba 01       	movw	r22, r20
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_Init+0x4e>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	2a 95       	dec	r18
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_Init+0x4a>
 230:	96 2f       	mov	r25, r22
 232:	90 95       	com	r25
 234:	93 23       	and	r25, r19
 236:	9a bb       	out	0x1a, r25	; 26
 238:	4d c0       	rjmp	.+154    	; 0x2d4 <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 23a:	90 81       	ld	r25, Z
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	59 f4       	brne	.+22     	; 0x256 <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg, ChannelPos);
 240:	97 b3       	in	r25, 0x17	; 23
 242:	ba 01       	movw	r22, r20
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_Init+0x6c>
 246:	66 0f       	add	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	2a 95       	dec	r18
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_Init+0x68>
 24e:	9b 01       	movw	r18, r22
 250:	29 2b       	or	r18, r25
 252:	27 bb       	out	0x17, r18	; 23
 254:	3f c0       	rjmp	.+126    	; 0x2d4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg, ChannelPos);
 256:	37 b3       	in	r19, 0x17	; 23
 258:	ba 01       	movw	r22, r20
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_Init+0x82>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	2a 95       	dec	r18
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_Init+0x7e>
 264:	96 2f       	mov	r25, r22
 266:	90 95       	com	r25
 268:	93 23       	and	r25, r19
 26a:	97 bb       	out	0x17, r25	; 23
 26c:	33 c0       	rjmp	.+102    	; 0x2d4 <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 26e:	90 81       	ld	r25, Z
 270:	91 30       	cpi	r25, 0x01	; 1
 272:	59 f4       	brne	.+22     	; 0x28a <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg, ChannelPos);
 274:	94 b3       	in	r25, 0x14	; 20
 276:	ba 01       	movw	r22, r20
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_Init+0xa0>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	2a 95       	dec	r18
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_Init+0x9c>
 282:	9b 01       	movw	r18, r22
 284:	29 2b       	or	r18, r25
 286:	24 bb       	out	0x14, r18	; 20
 288:	25 c0       	rjmp	.+74     	; 0x2d4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg, ChannelPos);
 28a:	34 b3       	in	r19, 0x14	; 20
 28c:	ba 01       	movw	r22, r20
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_Init+0xb6>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	2a 95       	dec	r18
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_Init+0xb2>
 298:	96 2f       	mov	r25, r22
 29a:	90 95       	com	r25
 29c:	93 23       	and	r25, r19
 29e:	94 bb       	out	0x14, r25	; 20
 2a0:	19 c0       	rjmp	.+50     	; 0x2d4 <DIO_Init+0xf6>
			}
			break;
			
			case  DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 2a2:	90 81       	ld	r25, Z
 2a4:	91 30       	cpi	r25, 0x01	; 1
 2a6:	59 f4       	brne	.+22     	; 0x2be <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg, ChannelPos);
 2a8:	91 b3       	in	r25, 0x11	; 17
 2aa:	ba 01       	movw	r22, r20
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_Init+0xd4>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_Init+0xd0>
 2b6:	9b 01       	movw	r18, r22
 2b8:	29 2b       	or	r18, r25
 2ba:	21 bb       	out	0x11, r18	; 17
 2bc:	0b c0       	rjmp	.+22     	; 0x2d4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg, ChannelPos);
 2be:	31 b3       	in	r19, 0x11	; 17
 2c0:	ba 01       	movw	r22, r20
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_Init+0xea>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_Init+0xe6>
 2cc:	96 2f       	mov	r25, r22
 2ce:	90 95       	com	r25
 2d0:	93 23       	and	r25, r19
 2d2:	91 bb       	out	0x11, r25	; 17
void DIO_Init()
{
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for (count = DIO_ChannelA0; count<PINCOUNT; count++)
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	32 96       	adiw	r30, 0x02	; 2
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	09 f0       	breq	.+2      	; 0x2de <DIO_Init+0x100>
 2dc:	85 cf       	rjmp	.-246    	; 0x1e8 <DIO_Init+0xa>
				ClearBit(DDRD_Reg, ChannelPos);
			}
			break;
		}
	}
 2de:	08 95       	ret

000002e0 <LCD_Cmd>:
		LCD_Cmd(0x80);
		LCD_String("                ");
		break;
		case 2:
		LCD_Cmd(0xC0);
		LCD_String("                ");
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
 2e4:	8b b3       	in	r24, 0x1b	; 27
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	9c 2f       	mov	r25, r28
 2ea:	90 7f       	andi	r25, 0xF0	; 240
 2ec:	89 2b       	or	r24, r25
 2ee:	8b bb       	out	0x1b, r24	; 27
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 300:	8f e8       	ldi	r24, 0x8F	; 143
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <LCD_Cmd+0x24>
 308:	00 c0       	rjmp	.+0      	; 0x30a <LCD_Cmd+0x2a>
 30a:	00 00       	nop
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	83 e0       	ldi	r24, 0x03	; 3
 310:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 314:	8f e1       	ldi	r24, 0x1F	; 31
 316:	9e e4       	ldi	r25, 0x4E	; 78
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_Cmd+0x38>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_Cmd+0x3e>
 31e:	00 00       	nop
 320:	8b b3       	in	r24, 0x1b	; 27
 322:	28 2f       	mov	r18, r24
 324:	2f 70       	andi	r18, 0x0F	; 15
 326:	30 e1       	ldi	r19, 0x10	; 16
 328:	c3 9f       	mul	r28, r19
 32a:	c0 01       	movw	r24, r0
 32c:	11 24       	eor	r1, r1
 32e:	82 2b       	or	r24, r18
 330:	8b bb       	out	0x1b, r24	; 27
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	83 e0       	ldi	r24, 0x03	; 3
 33e:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 342:	8f e8       	ldi	r24, 0x8F	; 143
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Cmd+0x66>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Cmd+0x6c>
 34c:	00 00       	nop
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9f e1       	ldi	r25, 0x1F	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Cmd+0x7a>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_Cmd+0x80>
 360:	00 00       	nop
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <LCD_Init>:
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	89 ef       	ldi	r24, 0xF9	; 249
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <LCD_Init+0xe>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <LCD_Init+0x18>
 37e:	00 00       	nop
 380:	83 e3       	ldi	r24, 0x33	; 51
 382:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 386:	8f e1       	ldi	r24, 0x1F	; 31
 388:	93 e0       	ldi	r25, 0x03	; 3
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <LCD_Init+0x24>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_Init+0x2a>
 390:	00 00       	nop
 392:	82 e3       	ldi	r24, 0x32	; 50
 394:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 398:	88 e2       	ldi	r24, 0x28	; 40
 39a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 39e:	86 e0       	ldi	r24, 0x06	; 6
 3a0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 3a4:	88 e1       	ldi	r24, 0x18	; 24
 3a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9f e1       	ldi	r25, 0x1F	; 31
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Init+0x54>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_Init+0x5a>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <LCD_Char>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	8b b3       	in	r24, 0x1b	; 27
 3ca:	8f 70       	andi	r24, 0x0F	; 15
 3cc:	9c 2f       	mov	r25, r28
 3ce:	90 7f       	andi	r25, 0xF0	; 240
 3d0:	89 2b       	or	r24, r25
 3d2:	8b bb       	out	0x1b, r24	; 27
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 3e4:	8f e8       	ldi	r24, 0x8F	; 143
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <LCD_Char+0x24>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <LCD_Char+0x2a>
 3ee:	00 00       	nop
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 3f8:	8f e1       	ldi	r24, 0x1F	; 31
 3fa:	9e e4       	ldi	r25, 0x4E	; 78
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_Char+0x38>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	8b b3       	in	r24, 0x1b	; 27
 406:	28 2f       	mov	r18, r24
 408:	2f 70       	andi	r18, 0x0F	; 15
 40a:	30 e1       	ldi	r19, 0x10	; 16
 40c:	c3 9f       	mul	r28, r19
 40e:	c0 01       	movw	r24, r0
 410:	11 24       	eor	r1, r1
 412:	82 2b       	or	r24, r18
 414:	8b bb       	out	0x1b, r24	; 27
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 426:	8f e8       	ldi	r24, 0x8F	; 143
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	0e 94 6d 00 	call	0xda	; 0xda <DIO_Write>
 43a:	8f e3       	ldi	r24, 0x3F	; 63
 43c:	9f e1       	ldi	r25, 0x1F	; 31
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	f1 f7       	brne	.-4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 444:	00 00       	nop
 446:	cf 91       	pop	r28
 448:	08 95       	ret

0000044a <LCD_String>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	fc 01       	movw	r30, r24
 452:	80 81       	ld	r24, Z
 454:	88 23       	and	r24, r24
 456:	59 f0       	breq	.+22     	; 0x46e <LCD_String+0x24>
 458:	8f 01       	movw	r16, r30
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Char>
 460:	cf 5f       	subi	r28, 0xFF	; 255
 462:	f8 01       	movw	r30, r16
 464:	ec 0f       	add	r30, r28
 466:	f1 1d       	adc	r31, r1
 468:	80 81       	ld	r24, Z
 46a:	81 11       	cpse	r24, r1
 46c:	f7 cf       	rjmp	.-18     	; 0x45c <LCD_String+0x12>
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <LCD_StringPos>:
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	61 30       	cpi	r22, 0x01	; 1
 47e:	19 f0       	breq	.+6      	; 0x486 <LCD_StringPos+0x10>
 480:	62 30       	cpi	r22, 0x02	; 2
 482:	51 f0       	breq	.+20     	; 0x498 <LCD_StringPos+0x22>
 484:	11 c0       	rjmp	.+34     	; 0x4a8 <LCD_StringPos+0x32>
 486:	84 2f       	mov	r24, r20
 488:	8f 70       	andi	r24, 0x0F	; 15
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 490:	ce 01       	movw	r24, r28
 492:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_String>
 496:	08 c0       	rjmp	.+16     	; 0x4a8 <LCD_StringPos+0x32>
 498:	84 2f       	mov	r24, r20
 49a:	8f 70       	andi	r24, 0x0F	; 15
 49c:	80 6c       	ori	r24, 0xC0	; 192
 49e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_String>
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <LCD_Clear>:
	}
}

void LCD_Clear()
{
	LCD_Cmd(0x01);
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_Cmd>
 4b4:	08 95       	ret

000004b6 <main>:
#include "ADC.h"
#include "DC_Motor.h"
#include <stdlib.h>

int main(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <main+0x6>
 4bc:	cd b7       	in	r28, 0x3d	; 61
 4be:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
 4c0:	0e 94 ef 00 	call	0x1de	; 0x1de <DIO_Init>
	LCD_Init();
 4c4:	0e 94 b3 01 	call	0x366	; 0x366 <LCD_Init>
	ADC_Init();
 4c8:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	DC_Motor_Init();
 4cc:	0e 94 56 00 	call	0xac	; 0xac <DC_Motor_Init>
	
	SetBit(DDRC,7);
 4d0:	a7 9a       	sbi	0x14, 7	; 20
	
	SPI_InitType InitData = {Slave, MSB};
	SPI_Init(InitData);
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_Init>
	char buffer[2];
	unsigned char cmd;
	
	while (1)
	{
		cmd = SPI_ReceiveChar(); //Receive Command from Master
 4da:	0e 94 fd 02 	call	0x5fa	; 0x5fa <SPI_ReceiveChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	31 ee       	ldi	r19, 0xE1	; 225
 4e2:	94 e0       	ldi	r25, 0x04	; 4
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	30 40       	sbci	r19, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x2e>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <main+0x38>
 4ee:	00 00       	nop
		_delay_ms(100);
		
		switch (cmd)
 4f0:	83 33       	cpi	r24, 0x33	; 51
 4f2:	d9 f0       	breq	.+54     	; 0x52a <main+0x74>
 4f4:	28 f4       	brcc	.+10     	; 0x500 <main+0x4a>
 4f6:	81 33       	cpi	r24, 0x31	; 49
 4f8:	41 f0       	breq	.+16     	; 0x50a <main+0x54>
 4fa:	82 33       	cpi	r24, 0x32	; 50
 4fc:	71 f0       	breq	.+28     	; 0x51a <main+0x64>
 4fe:	ed cf       	rjmp	.-38     	; 0x4da <main+0x24>
 500:	84 33       	cpi	r24, 0x34	; 52
 502:	29 f1       	breq	.+74     	; 0x54e <main+0x98>
 504:	84 34       	cpi	r24, 0x44	; 68
 506:	a9 f1       	breq	.+106    	; 0x572 <main+0xbc>
 508:	e8 cf       	rjmp	.-48     	; 0x4da <main+0x24>
		{
			case '1':
			SetBit(PORTC,7);
 50a:	af 9a       	sbi	0x15, 7	; 21
			LCD_Clear();
 50c:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
			LCD_String("Light ON");
 510:	80 ea       	ldi	r24, 0xA0	; 160
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_String>
			break;
 518:	e0 cf       	rjmp	.-64     	; 0x4da <main+0x24>
			
			case '2':
			ClearBit(PORTC,7);
 51a:	af 98       	cbi	0x15, 7	; 21
			LCD_Clear();
 51c:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
			LCD_String("Light OFF");
 520:	89 ea       	ldi	r24, 0xA9	; 169
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 25 02 	call	0x44a	; 0x44a <LCD_String>
			break;
 528:	d8 cf       	rjmp	.-80     	; 0x4da <main+0x24>
			
			case '3':
			DC_Motor_Direction('F');
 52a:	86 e4       	ldi	r24, 0x46	; 70
 52c:	0e 94 63 00 	call	0xc6	; 0xc6 <DC_Motor_Direction>
			LCD_Clear();
 530:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
			LCD_StringPos("DC Motor ON",1,0);
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	83 eb       	ldi	r24, 0xB3	; 179
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
			LCD_StringPos("Forward Dir",2,0);;
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	62 e0       	ldi	r22, 0x02	; 2
 544:	8f eb       	ldi	r24, 0xBF	; 191
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
			break;
 54c:	c6 cf       	rjmp	.-116    	; 0x4da <main+0x24>
			
			case '4':
			DC_Motor_Direction('B');
 54e:	82 e4       	ldi	r24, 0x42	; 66
 550:	0e 94 63 00 	call	0xc6	; 0xc6 <DC_Motor_Direction>
			LCD_Clear();
 554:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
			LCD_StringPos("DC Motor ON",1,0);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	83 eb       	ldi	r24, 0xB3	; 179
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
			LCD_StringPos("Backward Dir",2,0);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	62 e0       	ldi	r22, 0x02	; 2
 568:	8b ec       	ldi	r24, 0xCB	; 203
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
			break;
 570:	b4 cf       	rjmp	.-152    	; 0x4da <main+0x24>
			
			case 0x44:
			temp = ADC_Read(0);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 578:	4a e0       	ldi	r20, 0x0A	; 10
 57a:	be 01       	movw	r22, r28
 57c:	6f 5f       	subi	r22, 0xFF	; 255
 57e:	7f 4f       	sbci	r23, 0xFF	; 255
 580:	96 95       	lsr	r25
 582:	87 95       	ror	r24
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	0e 94 01 03 	call	0x602	; 0x602 <__itoa_ncheck>
			temp /= 4;
			itoa(temp,buffer,10);
			
			if (SPI_Receive_Transmit(buffer[0]) == 0x21)
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_Receive_Transmit>
 592:	81 32       	cpi	r24, 0x21	; 33
 594:	71 f4       	brne	.+28     	; 0x5b2 <main+0xfc>
			{
				LCD_Clear();
 596:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
				LCD_StringPos("Reading",1,0);
 59a:	40 e0       	ldi	r20, 0x00	; 0
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	88 ed       	ldi	r24, 0xD8	; 216
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
				LCD_StringPos("Temperature",2,0);
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	80 ee       	ldi	r24, 0xE0	; 224
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 3b 02 	call	0x476	; 0x476 <LCD_StringPos>
			}
			if (SPI_Receive_Transmit(buffer[1]) == 0x22) LCD_Clear();
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <SPI_Receive_Transmit>
 5b8:	82 32       	cpi	r24, 0x22	; 34
 5ba:	09 f0       	breq	.+2      	; 0x5be <main+0x108>
 5bc:	8e cf       	rjmp	.-228    	; 0x4da <main+0x24>
 5be:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_Clear>
 5c2:	8b cf       	rjmp	.-234    	; 0x4da <main+0x24>

000005c4 <SPI_Init>:
void SPI_TransmitChar(unsigned char Data)
{
	SPDR = Data;
	while (!(SPSR & (1<<SPIF)));
	//while (SPI->MySPSR._SPIF == 0);
}
 5c4:	88 23       	and	r24, r24
 5c6:	19 f0       	breq	.+6      	; 0x5ce <SPI_Init+0xa>
 5c8:	81 30       	cpi	r24, 0x01	; 1
 5ca:	51 f0       	breq	.+20     	; 0x5e0 <SPI_Init+0x1c>
 5cc:	08 95       	ret
 5ce:	87 b3       	in	r24, 0x17	; 23
 5d0:	80 6b       	ori	r24, 0xB0	; 176
 5d2:	87 bb       	out	0x17, r24	; 23
 5d4:	be 98       	cbi	0x17, 6	; 23
 5d6:	c4 9a       	sbi	0x18, 4	; 24
 5d8:	8d b1       	in	r24, 0x0d	; 13
 5da:	80 65       	ori	r24, 0x50	; 80
 5dc:	8d b9       	out	0x0d, r24	; 13
 5de:	08 95       	ret
 5e0:	87 b3       	in	r24, 0x17	; 23
 5e2:	8f 74       	andi	r24, 0x4F	; 79
 5e4:	87 bb       	out	0x17, r24	; 23
 5e6:	be 9a       	sbi	0x17, 6	; 23
 5e8:	8d b1       	in	r24, 0x0d	; 13
 5ea:	82 64       	ori	r24, 0x42	; 66
 5ec:	8d b9       	out	0x0d, r24	; 13
 5ee:	08 95       	ret

000005f0 <SPI_Receive_Transmit>:
 5f0:	8f b9       	out	0x0f, r24	; 15
 5f2:	77 9b       	sbis	0x0e, 7	; 14
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <SPI_Receive_Transmit+0x2>
 5f6:	8f b1       	in	r24, 0x0f	; 15
 5f8:	08 95       	ret

000005fa <SPI_ReceiveChar>:

unsigned char SPI_ReceiveChar(void)
{
	while (!(SPSR & (1<<SPIF)));
 5fa:	77 9b       	sbis	0x0e, 7	; 14
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <SPI_ReceiveChar>
	//while (SPI->MySPSR._SPIF == 0);
	return SPDR;
 5fe:	8f b1       	in	r24, 0x0f	; 15
 600:	08 95       	ret

00000602 <__itoa_ncheck>:
 602:	bb 27       	eor	r27, r27
 604:	4a 30       	cpi	r20, 0x0A	; 10
 606:	31 f4       	brne	.+12     	; 0x614 <__itoa_ncheck+0x12>
 608:	99 23       	and	r25, r25
 60a:	22 f4       	brpl	.+8      	; 0x614 <__itoa_ncheck+0x12>
 60c:	bd e2       	ldi	r27, 0x2D	; 45
 60e:	90 95       	com	r25
 610:	81 95       	neg	r24
 612:	9f 4f       	sbci	r25, 0xFF	; 255
 614:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__utoa_common>

00000618 <__utoa_ncheck>:
 618:	bb 27       	eor	r27, r27

0000061a <__utoa_common>:
 61a:	fb 01       	movw	r30, r22
 61c:	55 27       	eor	r21, r21
 61e:	aa 27       	eor	r26, r26
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	aa 1f       	adc	r26, r26
 626:	a4 17       	cp	r26, r20
 628:	10 f0       	brcs	.+4      	; 0x62e <__utoa_common+0x14>
 62a:	a4 1b       	sub	r26, r20
 62c:	83 95       	inc	r24
 62e:	50 51       	subi	r21, 0x10	; 16
 630:	b9 f7       	brne	.-18     	; 0x620 <__utoa_common+0x6>
 632:	a0 5d       	subi	r26, 0xD0	; 208
 634:	aa 33       	cpi	r26, 0x3A	; 58
 636:	08 f0       	brcs	.+2      	; 0x63a <__utoa_common+0x20>
 638:	a9 5d       	subi	r26, 0xD9	; 217
 63a:	a1 93       	st	Z+, r26
 63c:	00 97       	sbiw	r24, 0x00	; 0
 63e:	79 f7       	brne	.-34     	; 0x61e <__utoa_common+0x4>
 640:	b1 11       	cpse	r27, r1
 642:	b1 93       	st	Z+, r27
 644:	11 92       	st	Z+, r1
 646:	cb 01       	movw	r24, r22
 648:	0c 94 26 03 	jmp	0x64c	; 0x64c <strrev>

0000064c <strrev>:
 64c:	dc 01       	movw	r26, r24
 64e:	fc 01       	movw	r30, r24
 650:	67 2f       	mov	r22, r23
 652:	71 91       	ld	r23, Z+
 654:	77 23       	and	r23, r23
 656:	e1 f7       	brne	.-8      	; 0x650 <strrev+0x4>
 658:	32 97       	sbiw	r30, 0x02	; 2
 65a:	04 c0       	rjmp	.+8      	; 0x664 <strrev+0x18>
 65c:	7c 91       	ld	r23, X
 65e:	6d 93       	st	X+, r22
 660:	70 83       	st	Z, r23
 662:	62 91       	ld	r22, -Z
 664:	ae 17       	cp	r26, r30
 666:	bf 07       	cpc	r27, r31
 668:	c8 f3       	brcs	.-14     	; 0x65c <strrev+0x10>
 66a:	08 95       	ret

0000066c <_exit>:
 66c:	f8 94       	cli

0000066e <__stop_program>:
 66e:	ff cf       	rjmp	.-2      	; 0x66e <__stop_program>
